FORMAT: 1A

# Admiral

Admiral is a deployment management system for Fleet and CoreOS. Unlike other deployment systems, Admiral also allows for automatic deployment and scaling of Fleet units.

# Configuration

Configuration for Admiral is stored directly in Etcd under the namespace specified by the command line parameter `--ns` (the default is `/admiral`). If this namespace is changed after the application has been launched for the first time already, then unexpected behavior will occur, as Admiral will likely believe it was just installed fresh and without any configuration set.

All configuration keys listed in this section are children of the root namespace. For example, a configuration item listed as `/config/enabled` will be located at `/admiral/config/enabled` with the default namespace.

## API Configuration

Configuration items for the general API.

### Authentication and Registration

#### `/config/registration/enabled`

A boolean indicating whether registration is enabled or not. If the configuration item does not exist, the server will default to disabling registration (i.e. disable registration).

# Admiral API Root [/v1]

This resource simply represents the root of the Admiral API. It provides a basic JSON response as validation that the API server is running.

## Retrieve the API Information [GET]

+ Response 200 (application/json)

        {
            "name": "Admiral API",
            "version": 1
        }

## Group Authentication

Resources related to authenticating users.

## Login [/v1/login]

### Login [POST]

Authenticates a user and returns a token that the client should use for further interactions with the API server.

Requests should be made with a JSON object containing the following items:

+ Request (application/json)

                {
                    "username": "johndoe",
                    "password": "password"
                }

+ Response 200 (application/json)

                {
                    "token": "API token"
                }
                
+ Response 401 (application/json)

                {
                    "error": 401,
                    "message": "The specified user was invalid."
                }

## Registration [/v1/register]

### Register [POST]

Registers a user with the specified information, and returns a new token if the registration was successful. Registration must be enabled on the server or this endpoint will return an error.

+ Request (application/json)

                {
                    "username": "johndoe",
                    "password": "password"
                }

+ Response 200 (application/json)

                {
                    "token": "API token"
                }
                
+ Response 500 (application/json)

                {
                    "error": 500,
                    "message": "The server is not accepting registration."
                }

## Group Apps & Services

## Applications [/v1/applications]

### Get Applications [GET]

Retrieves all of the applications.

+ Response 200 (application/json)

                [
                    {
                        "id": "Application ID",
                        "name": "Application name",
                        "...": "..."
                    }
                ]

## Group Machines

## Machines [/v1/machines]

### Get Machines [GET]

Retrieves the current machines in the cluster.

+ Response 200 (application/json)

                [
                    {
                        "machine": "Machine ID",
                        "ip": "192.168.0.1",
                        "metadata": {
                            "key": "value"
                        }
                    }
                ]

+ Response 500 (application/json)

                {
                    "error": 500,
                    "message": "There was a problem fetching the machines."
                }